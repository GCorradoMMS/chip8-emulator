mod chip8 {
    
  pub fn initialize()
  {
      let mut _program_counter : u16 = 0x200;                  // Program counter starts at 0x200
      let mut _opcode : u16 = 0;                               // Reset current opcode	
      let mut _index_register : u16 = 0;                       // Reset index register
      let mut _stack : u16 = 0;                          // Reset stack pointer
      let mut _sp : u16;
      let mut _memory : Vec<u8> = Vec::with_capacity(4096);
      let mut _cpu_registers : [u8 ; 16];
      let mut _gfx : [u8; 2048];
      let mut _delay_timer : u8;
      let mut _sound_timer : u8;
      let mut _keypad : u8;
      let mut _chip8_fontset : [u8 ; 80] = 
      [ 
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
      ];
      
      for n in 0..80 {                        // Load fontset
          _memory[n] = _chip8_fontset[n];
      }
  }
  
  // pub fn emulateCycle()
  // {

  // }
}
